name: Solar System Workflow

on:
    workflow_dispatch: 
    # push: 
    #     branches: 
    #         - main
    #         - 'feature/*'
# permissions:
#   contents: read
#   packages: write   
env:
  MONGO_URI: ${{ secrets.MONGO_URI}}
jobs:
    unit-testing:
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://non-prod-user:non-prod-password@localhost:27017/superData'
        strategy:
          matrix:
            node_version: [19,20]
            os: [ubuntu-latest]
            exclude:
              - node_version: 20
        name: Unit Testing
        runs-on: ${{ matrix.os }}
        steps:
            - name: Checkout Repo
              uses: actions/checkout@v4
            - name: Setup NodeJs
              uses: actions/setup-node@v3
              with:
                node-version: ${{ matrix.node_version }}
            - name: Cache Dependencies
              uses: actions/cache@v3
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json')}}
            - name: Install Dependencies
              run: npm install
            - name: Unit Testing
              run: npm test
    npm-coverage:
      needs: unit-testing
      name: Code Coverage
      runs-on: ubuntu-latest
      services:
        mongo-db:
          image: siddharth67/mongo-db:non-prod
          options: 
            --name mongo
      env:
        MONGO_URI: 'mongodb://non-prod-user:non-prod-password@mongo:27017/superData'
      container: 
        image: node:19
      
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4
        # - name: Setup NodeJs
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 19
        - name: Cache Dependencies
          uses: actions/cache@v3
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
        - name: Install Dependencies
          run: npm install
        - name: Run Coverage
          run: npm run coverage
          id: code-coverage-id
          continue-on-error: true
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5
    docker:
      name: Containerization
      runs-on: ubuntu-latest
      needs: npm-coverage
      permissions: 
        packages: write
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4
        - name: Login To DockerHub
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKER_USER }}
            password: ${{ secrets.DOCKER_PASS }}
        - name: Login To GHCR
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: Docker Build And Push
          uses: docker/build-push-action@v6
          with:
            context: .
            push: true
            tags: |
                ${{ vars.DOCKER_USER}}/solar-system:${{ github.sha }}
                ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      outputs:
        DEV_URL: ${{ steps.Get_Url.outputs.URL}}
      environment: 
        name: development
        url: https://web.tooskaoil.com
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4
        - name: Setup Kubectl
          uses: azure/setup-kubectl@v4
        - name: Set KubeConfig
          uses: azure/k8s-set-context@v4
          with:
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}
            context: kubernetes-admin@kubernetes
        - name: Check Namespace Exist
          run: |
            if ! kubectl get namespace ${{ vars.NAMESPACE }} > /dev/null 2>&1 ; then
              kubectl create namespace ${{ vars.NAMESPACE }}
            else
              echo "Namespace ${{ vars.NAMESPACE }} Already Exist"
            fi
        - name: Create Secret 
          run: |
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds --from-literal=MONGO_URI=${{ secrets.MONGO_URI }} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f -
        - name: create tls secret
          run: |
            set -euo pipefail
            echo "${{ secrets.CERT }}" > tls.crt
            echo "${{ secrets.KEY }}" > tls.key
            kubectl -n ${{ vars.NAMESPACE }} create secret tls solar --cert=tls.crt \
            --key=tls.key \
            --dry-run=client \
            -o yaml | kubectl apply -f -
        - name: Replace Token Manifest
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: '["kubernetes/development/*.yaml"]'
          env:
            REPLICAS: ${{ vars.REPLICAS }}
            NAMESPACE: ${{ vars.NAMESPACE }}
            K8S_IMAGE: ${{ vars.DOCKER_USER}}/solar-system:${{ github.sha }}
        - name: Apply Deployment
          run: |
            kubectl apply -f kubernetes/development/
        - name: Get URL
          id: Get_Url
          run: |
            echo "URL=$(kubectl get ingress -n ${{ vars.NAMESPACE }} ingress-solar -o jsonpath="{.spec.rules[0].host}")" >> "$GITHUB_OUTPUT"
    dev-integration-testing:
      needs: dev-deploy
      name: Development Testing
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output
          env:
            DEV_URL: ${{needs.dev-deploy.outputs.DEV_URL}}
          run: |
            echo $DEV_URL
            curl https://$DEV_URL/live -s -k |jq -r .status |grep -w live
